let s:expect = themis#helper('expect')

Describe vsnip#syntax#placeholder

  Describe #resolve

    It Should resolve tabstop
      let l:text = join([
            \ 'console.log($0$1)'
            \ ], "\n")
      let [l:text, l:placeholders] = vsnip#syntax#placeholder#resolve([1, 1], l:text)
      call s:expect('console.log()').to_equal(l:text)

      call s:expect(l:placeholders[0]['order']).to_equal(1)
      call s:expect(l:placeholders[0]['tabstop']).to_equal(1)
      call s:expect(l:placeholders[0]['text']).to_equal('')
      call s:expect(l:placeholders[0]['choices']).to_equal([])
      call s:expect(l:placeholders[0]['range']['start']).to_equal([1, 13])
      call s:expect(l:placeholders[0]['range']['end']).to_equal([1, 13])

      call s:expect(l:placeholders[1]['order']).to_equal(0)
      call s:expect(l:placeholders[1]['tabstop']).to_equal(0)
      call s:expect(l:placeholders[1]['text']).to_equal('')
      call s:expect(l:placeholders[1]['choices']).to_equal([])
      call s:expect(l:placeholders[1]['range']['start']).to_equal([1, 13])
      call s:expect(l:placeholders[1]['range']['end']).to_equal([1, 13])
    End

    It Should resolve default-text
      let l:text = join([
            \ 'console.log(${1:default-text1} ${2:default-text2})'
            \ ], "\n")
      let [l:text, l:placeholders] = vsnip#syntax#placeholder#resolve([1, 1], l:text)
      call s:expect('console.log(default-text1 default-text2)').to_equal(l:text)

      call s:expect(l:placeholders[0]['order']).to_equal(0)
      call s:expect(l:placeholders[0]['tabstop']).to_equal(1)
      call s:expect(l:placeholders[0]['text']).to_equal('default-text1')
      call s:expect(l:placeholders[0]['choices']).to_equal([])
      call s:expect(l:placeholders[0]['range']['start']).to_equal([1, 13])
      call s:expect(l:placeholders[0]['range']['end']).to_equal([1, 26])

      call s:expect(l:placeholders[1]['order']).to_equal(1)
      call s:expect(l:placeholders[1]['tabstop']).to_equal(2)
      call s:expect(l:placeholders[1]['text']).to_equal('default-text2')
      call s:expect(l:placeholders[1]['choices']).to_equal([])
      call s:expect(l:placeholders[1]['range']['start']).to_equal([1, 27])
      call s:expect(l:placeholders[1]['range']['end']).to_equal([1, 40])
    End

    It Should resolve choices
      " TODO: ${1:|log|} should handle as ${1:log}.

      let l:text = join([
            \ 'console.${1|log,warn,error|}("${2|log,warn,error|}")'
            \ ], "\n")
      let [l:text, l:placeholders] = vsnip#syntax#placeholder#resolve([1, 1], l:text)
      call s:expect('console.log("log")').to_equal(l:text)

      call s:expect(l:placeholders[0]['order']).to_equal(0)
      call s:expect(l:placeholders[0]['tabstop']).to_equal(1)
      call s:expect(l:placeholders[0]['text']).to_equal('log')
      call s:expect(l:placeholders[0]['choices']).to_equal(['log', 'warn', 'error'])
      call s:expect(l:placeholders[0]['range']['start']).to_equal([1, 9])
      call s:expect(l:placeholders[0]['range']['end']).to_equal([1, 12])

      call s:expect(l:placeholders[1]['order']).to_equal(1)
      call s:expect(l:placeholders[1]['tabstop']).to_equal(2)
      call s:expect(l:placeholders[1]['text']).to_equal('log')
      call s:expect(l:placeholders[1]['choices']).to_equal(['log', 'warn', 'error'])
      call s:expect(l:placeholders[1]['range']['start']).to_equal([1, 14])
      call s:expect(l:placeholders[1]['range']['end']).to_equal([1, 17])
    End

  End

End

