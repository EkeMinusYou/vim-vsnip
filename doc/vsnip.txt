*vsnip* *vim-vsnip*

(v)scode (snip)pet

The plugin aims to VSCode's snippet feature.



==============================================================================
CONTENTS                                                      *vsnip-contents*

INTRODUCTION                                                     |vsnip-intro|
INSTALL                                                        |vsnip-install|
SETTING                                                        |vsnip-setting|
MAPPING                                                        |vsnip-mapping|
COMMAND                                                        |vsnip-command|
VARIABLE                                                      |vsnip-variable|
FUNCTION                                                      |vsnip-function|
FAQ                                                                |vsnip-faq|
TODO                                                              |vsnip-todo|
CHANGELOG                                                    |vsnip-changelog|



==============================================================================
INTRODUCTION                                                     *vsnip-intro*

`vsnip` is snippet plugin that aims to Visual Studio Code's snippet feature.

Currently implementations are not supported features below.

- variable/placeholder transform.
- nested placeholder.
- multiline changes.



==============================================================================
INSTALL                                                        *vsnip-install*

>
  call dein#add('hrsh7th/vim-vsnip')

  or

  Plug 'hrsh7th/vim-vsnip'
<

Can use any plugin managers to install.



==============================================================================
SETTING                                                        *vsnip-setting*
>
  let g:vsnip_snippet_dir = expand('~/.vsnip')
  imap <expr><Tab> vsnip#expandable_or_jumpable() ? '<Plug>(vsnip-expand-or-jump)' : '<Tab>'
  smap <expr><Tab> vsnip#expandable_or_jumpable() ? '<Plug>(vsnip-expand-or-jump)' : '<Tab>'
<



==============================================================================
MAPPING                                                        *vsnip-mapping*

`vsnip` provides these `<Plug>` mapping.

>
  inoremap <silent> <Plug>(vsnip-expand-or-jump) <Esc>:<C-u>call vsnip#expand_or_jump()<CR>
  snoremap <silent> <Plug>(vsnip-expand-or-jump) <Esc>:<C-u>call vsnip#expand_or_jump()<CR>
<



==============================================================================
COMMAND                                                        *vsnip-command*

>
  :VsnipOpen
<
  Open snippet file for current filetype.


>
  :VsnipEdit %snippet_prefix%
<
  Open snippet edit buffer.



==============================================================================
VARIABLE                                                         *vsnip-usage*

>
  g:vsnip_snippet_dir (string)
<
    Default: '~/.vsnip'

    Specify user snippet dir.


>
  g:vsnip_snippet_dirs (string[])
<
    Default: ['/path/to/default-snippet-dir']

    Specify snippets dir.


>
  g:vsnip_sync_delay (number)
<
    Default: 100

    Milliseconds to delay of sync same placeholder.


>
  g:vsnip_namespace (string)
<
    Default: 'snip_'

    This value will be prepend to all prefixes.
    Will be useful to auto-completion.


>
  g:vsnip_select_trigger (regex-string)
<
    Default: '.'

    If you use $TM_SELECTED_TEXT in snippet, You can specify replacement text like `prefix.replacement` or `prefix replacement` or `prefix;replacement`.


>
  g:vsnip_select_pattern (regex-string)
<
    Default: '\w\+'

    To use capture $TM_SELECTED_TEXT.



==============================================================================
FUNCTION                                                      *vsnip-function*

>
  vsnip#select(text) -> ()
<
    Select specified text. It uses in expanding snippet.
    See https://code.visualstudio.com/docs/editor/userdefinedsnippets.


>
  vsnip#expandable() -> (v:true | v:false)
<
    Check expandable in current cursor position.


>
  vsnip#jumpable() -> (v:true | v:false)
<
    Check jumpable in current cursor position.


>
  vsnip#expandable_or_jumpable() -> (v:true | v:false)
<
    Check jumpable in current cursor position.


>
  vsnip#expand_or_jump() -> ()
<
    Invoke expand or jump.



==============================================================================
FAQ                                                                *vsnip-faq*

------------------------------------------------------------------------------
How to define snippets?~

  `vsnip` searches `&filetype.json` in `g:vsnip_snippet_dir` and `g:vsnip_snippet_dirs`.
  When `&filetype` is `typescript.tsx`, `vsnip` try to load `typescript.tsx.json`, `typescript.json` and `tsx.json`.

  If found multiple snippet, those are merged.


  Snippet format is same of VSCode (or Language Server Protocol).
  You can find documentation in [spec](https://code.visualstudio.com/docs/editor/userdefinedsnippets.)

  You can use `:VsnipEdit` to open (or create) user snippet file.
  You can use `:VsnipNew` to create new snippet via visual selected lines.


------------------------------------------------------------------------------
How to use this with lexima?~

  You should define key-mapping like belwo.
>
  imap <expr><Tab> vsnip#expandable_or_jumpable() ? '<Plug>(vsnip-expand-or-jump)' : lexima#expand('<LT>Tab>', 'i')
  smap <expr><Tab> vsnip#expandable_or_jumpable() ? '<Plug>(vsnip-expand-or-jump)' : lexima#expand('<LT>Tab>', 'i')
<

------------------------------------------------------------------------------
How to enable snippets auto-completion?~

  If you can use `deoplete.nvim`, use `deoplete-vsnip`.



==============================================================================
TODO                                                              *vsnip-todo*

- multibytes support.
- regex for variable/placeholder.
- performance up.



==============================================================================
CHANGELOG                                                    *vsnip-changelog*

2019/09/05~
- Improve snippet creation

2019/09/04~
- Change `select` behavior.

2019/09/03~
- Add `g:vsnip_snippet_dir` for manage user snippets.
- Change behavior `:VsnipEdit`.
  - `:VsnipEdit` will open snippet file in under `g:vsnip_snippet_dir`.
- Add `:VsnipNew` command (unstable/experimental).
- Add `g:vsnip_select_trigger`
- Add `g:vsnip_select_pattern`

2019/09/02~
- Remove `VsnipSelect` experimental.
- Add `g:vsnip_namespace`
- Add `g:vsnip_sync_delay`
- Update README.md
- Initial release



